<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recap Python-Grundlagen :: Zertifikatskurs Data Librarian - Modul 3 - Daten analysieren und darstellen</title>
    <link>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/index.html</link>
    <description>Im Folgenden findest Du Informationen zum Nachschlagen und Auffrischen Deiner Python-Kenntnisse und eine Übersicht über nützliche Python-BIbliotheken.</description>
    <generator>Hugo</generator>
    <language>de-DE</language>
    <atom:link href="http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conda und Anaconda</title>
      <link>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/anaconda/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/anaconda/index.html</guid>
      <description>Conda ist eine freie und offene Softwarepaketverwaltung für Python. Neben der Möglichkeit, Pakete (packages, libraries) für Python aus dem Internet zu installieren, können mit conda virtuelle Umgebungen (environments) angelegt werden. Diese Umgebungen beinhalten nur die Pakete und Python Versionen, die für ein spezifisches Projekt gebraucht werden. Umgebungen können mit anderen Personen geteilt werden, sodass sichergestellt ist, dass alle Programmierer mit den gleichen Paketen und Versionen arbeiten, auch wenn sie unterschiedliche Systeme (Windows, Linux, MacOS) verwenden.</description>
    </item>
    <item>
      <title>Jupyter Notebooks</title>
      <link>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/notebooks/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/notebooks/index.html</guid>
      <description>Hier findet sich eine kleine Erinnerung und Beispielaufgabe zum Thema Jupyter Notebooks.&#xA;Die Projektaufgaben und Code-Beispiele in diesem Modul werden über Jupyter Notebooks erstellt und verteilt.&#xA;Jupyter Notebooks bieten eine browserbasierte graphische Schnittstelle zur Python Programmierumgebung. Deswegen können Notebooks auf jedem System gestartet werden, man benötigt dazu nur einen Web-Browser und eine lokale installierte Version von Python.&#xA;Darüber hinaus bieten Notebooks die Möglichkeit Text, Visualisierungen und Code in einer integrierten Datei zu erstellen. Somit können einfach statistische Reports und Analysen erstellt werden. Die Replizierbarkeit der Ergebnisse ist auch gewährleistet, da jede Person, die Programmierschritte im Notebook auf dem eignen Rechner wiederholen kann.</description>
    </item>
    <item>
      <title>Python Pakete und Bibliothekten</title>
      <link>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/packages/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024-2025-ZK_Data_Librarian_Modul_3/organisation/recap_python/packages/index.html</guid>
      <description>Die folgende Liste gibt einen kurzen Überblick über die wichtigsten Python Bibliotheken, von denen Du manche im Modul näher kennenlernen wirst. Im ersten Teil des Modules werden wir hauptsächlich mit pandas und seaborn arbeiten.&#xA;Programming Recap Module, Paket, Library Ein Python Skript mit der Endung .py wird Modul genannt. Eine Sammlung von Modulen in einem Ordner, wird Paket (package) genannt. Eine Sammlung von Paketen innerhalb eines größeren Projekts wird Bibliothek (library) genannt. Ein framework ist eine große grundlegende Bibliothek, mit einem bestimmten Zweck und mit vielen Paketen, die voneinander abhängen und aufeinander aufbauen. Die Begriffe werden aber nicht einheitlich benutzt und der Übergang ist oft fließend. Kommentare stehen immer hinter dem # Zeichen. Text steht immer in Anführungszeichen, z.B &#34;hallo&#34; oder &#39;hi&#39;. Mit dem import Befehl können externe Bibliotheken mit mehr Funktionalitäten geladen werden. Mit dem Zuweisungsoperator = können Objekte einem Variablennamen oder einem Funktionswert zugeordnet werden, z.B: x = 1, text = &#39;hallo&#39;. Funktionen werden mit runden Klammern aufgerufen und können Funktionsargumente besitzen, z.B. sum([1, 2, 3]). Viele Funktionen sind Bestandteil von Bibliotheken und werden dann wie folgt aufgerufen: &lt;paketname&gt;.&lt;funktionsname&gt;(&lt;funktionsargumente&gt;)</description>
    </item>
  </channel>
</rss>